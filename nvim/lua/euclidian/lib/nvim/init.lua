local _tl_compat; if (tonumber((_VERSION or ''):match('[%d.]*$')) or 0) < 5.3 then local p, m = pcall(require, 'compat53.module'); if p then _tl_compat = m end end; local assert = _tl_compat and _tl_compat.assert or assert; local ipairs = _tl_compat and _tl_compat.ipairs or ipairs; local pcall = _tl_compat and _tl_compat.pcall or pcall; local string = _tl_compat and _tl_compat.string or string; local table = _tl_compat and _tl_compat.table or table
local a = vim.api

local function failsafe(f, err_prefix)
   local ok = true
   local err
   return function()
      if ok then
         ok, err = pcall(f)
      end
      if not ok then
         a.nvim_err_writeln((err_prefix or "") .. err)
      end
   end
end

local UI = {}















local auto = require("euclidian.lib.nvim._autogenerated")

local function unCamel(s)
   return (s:gsub("[A-Z]", function(m)
      return "_" .. m:lower()
   end))
end
local function genMetatable(t, prefix)
   local cache = setmetatable({}, { __mode = "kv" })
   local api = vim.api
   return {
      __call = function(_, n)
         if not n or n == 0 then
            n = api["nvim_get_current_" .. prefix]()
         end
         if not cache[n] then
            cache[n] = setmetatable({ id = n }, { __index = t })
         end
         return cache[n]
      end,
      __index = function(_, key)
         local fn = api["nvim_" .. prefix .. "_" .. unCamel(key)]
         return fn and function(self, ...)
            return fn(self.id, ...)
         end
      end,
      __eq = function(a, b)
         if not (type(a) == "table") or not (type(b) == "table") then
            return false
         end
         local aMt = getmetatable(a)
         local bMt = getmetatable(b)
         if not aMt or not bMt then
            return false
         end
         return (aMt.__index == bMt.__index) and
         ((a).id == (b).id)
      end,
   }
end
local function genSetMetatable(t, prefix)
   setmetatable(t, genMetatable(t, prefix))
end
genSetMetatable(auto.Buffer, "buf")
genSetMetatable(auto.Window, "win")
genSetMetatable(auto.Tab, "tab")

local nvim = {
   Window = auto.Window,
   Buffer = auto.Buffer,
   Tab = auto.Tab,

   UI = UI,
   MapOpts = auto.MapOpts,

   _exports = {},
}

function nvim.ui(n)
   return (a.nvim_list_uis())[n or 1]
end

function nvim.openWin(b, enter, c)
   return nvim.Window(a.nvim_open_win(b and b.id or 0, enter, c))
end

function nvim.createBuf(listed, scratch)
   return nvim.Buffer(a.nvim_create_buf(listed, scratch))
end

function nvim.command(fmt, ...)
   a.nvim_command(string.format(fmt, ...))
end

local function to_str_arr(s)
   if type(s) == "string" then
      return { s }
   else
      return s
   end
end

function nvim.autocmd(s_events, s_patts, expr)
   assert(s_events, "no events")
   assert(s_patts, "no patterns")
   assert(expr, "no expr")

   local events = table.concat(to_str_arr(s_events), ",")
   local patts = table.concat(to_str_arr(s_patts), ",")

   local actual_expr
   if type(expr) == "string" then
      actual_expr = expr
   else
      local key = "autocmd" .. events .. patts
      nvim._exports[key] = failsafe(expr, ("Error in autocmd for %s %s: "):format(events, patts))
      actual_expr = ("lua require'euclidian.lib.nvim'._exports[%q]()"):format(key)
   end

   nvim.command("autocmd %s %s %s", events, patts, actual_expr)
end

function nvim.augroup(name, lst, clear)
   nvim.command("augroup %s", name)
   if clear then
      nvim.command("autocmd!")
   end
   for _, v in ipairs(lst) do
      nvim.autocmd(v[1], v[2], v[3])
   end
   nvim.command("augroup END")
end

function nvim.setKeymap(mode, lhs, rhs, userSettings)
   if type(rhs) == "string" then
      a.nvim_set_keymap(mode, lhs, rhs, userSettings)
   else
      local key = "keymap" .. mode .. a.nvim_replace_termcodes(lhs, true, true, true)
      nvim._exports[key] = failsafe(rhs, "Error in keymap: ")
      a.nvim_set_keymap(
      mode,
      lhs,
      ("<cmd>lua require'euclidian.lib.nvim'._exports[%q]()<cr>"):format(key),
      userSettings)

   end
end

function nvim.delKeymap(mode, lhs)
   pcall(a.nvim_del_keymap, mode, lhs)
end

nvim.Buffer.setKeymap = function(self, mode, lhs, rhs, userSettings)
   if type(rhs) == "string" then
      a.nvim_buf_set_keymap(self.id, mode, lhs, rhs, userSettings)
   else
      local key = "bufkeymap" .. tostring(self.id) .. mode .. a.nvim_replace_termcodes(lhs, true, true, true)
      nvim._exports[key] = failsafe(rhs, "Error in keymap: ")
      a.nvim_buf_set_keymap(
      self.id,
      mode,
      lhs,
      ("<cmd>lua require'euclidian.lib.nvim'._exports[%q]()<cr>"):format(key),
      userSettings)

      nvim.command("autocmd BufUnload <buffer=%d> ++once lua require'euclidian.lib.nvim'._exports[%q] = nil", self.id, key)
   end
end

nvim.Buffer.delKeymap = function(self, mode, lhs)
   pcall(a.nvim_buf_del_keymap, self.id, mode, lhs)
end

return nvim